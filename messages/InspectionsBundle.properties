inspection.export.results.invalidated.item=失效项目
group.names.resource.management.issues=资源管理问题
inspection.offline.view.tool.display.name.title=名称
inconsistent.bundle.property.inconsistent.end=不一致的属性值结束“{0}”
inspection.dead.code.problem.synopsis27.method=方法使用(s),但他们都属于递归调用链,没有成员可从入口点.
inspection.export.results.type.references=以下使用这种类型
group.names.control.flow.issues=控制流问题
severities.default.settings.message=编辑设置|颜色和字体
inspection.same.return.value.display.name=方法返回相同的值
inspection.redundant.cast.remove.quickfix=移除多余的转换
inspection.unused.symbol.check.classes=检查类(&C)
assignment.to.itself.problem.descriptor=变量"{0}"是分配给自己
inspection.export.results.capitalized.location=位置
inspection.unused.symbol.check.localvars=检查局部变量(&L)
profile.mapping.inspection.profile.column.title=检查配置文件
inspection.action.apply.quickfix.description=应用一个检验quickfix
inspection.javadoc.option.tab.title.field=字段
suspected.module.dependency.problem.descriptor=依赖从模块"{0}"模块"{1}"可能是可能被删除当互补范围"{2}"也不包含参考模块"{3}"
dataflow.message.return.nullable.from.notnullable=表达式 <code>#ref</code> 可以计算为null，但返回未声明方法为 @{0}
access.static.via.instance=访问静态成员通过实例参考
inspection.export.results.extends.implements=继承/实现
suppress.inspection.annotation.syntax.error=不正确的注释语法: {0}
inspection.dead.code.safe.delete.quickfix=安全删除
inspection.unused.parameter.display.name=未使用的方法参数
inspection.export.results.capitalized.interface=接口
profile.activate.action.text=设置为项目默认
dataflow.message.return.nullable.from.notnull=表达式 <code>#ref</code> 可以评价为空返回由方法声明为 @NotNull
inspection.same.parameter.display.name=实际的方法的参数是相同的
parsing.inspections.dump.progress.title=分析检查XML
group.names.imports=导入
default.file.template.report.catch.section=报告默认抓住部分
inspection.progress.title=检查代码...
inspection.javadoc.html.not.required.dialog.title=编辑其他不需要的HTML属性
unused.import.statement=未使用的导入语句
inspection.display.name=分析代码...
unused.symbol=未使用的符号
inconsistent.bundle.property.inconsistent.placeholders=不一致的占位符:{0}在“{1}”
group.names.security.issues=安全问题
group.names.assignment.issues=赋值问题
default.file.template.report.method.body=报告默认创建/覆盖/实现方法主体
run.with.choosen.profile.dialog.option=选择运行配置文件(&C)
inspection.problem.resolution=解决问题
inspection.annotate.quickfix.overrides=重写
inspection.root.node.title=检查
group.names.potentially.confusing.code.constructs=可能引起混淆的代码结构
inspection.dead.code.problem.synopsis28.method=方法有一个使用但它无法访问从入口点.
inspection.javadoc.method.problem.descriptor=参数{1}的描述丢失{0}标记
inspection.javadoc.ref.display.name=声明有问题在Javadoc中引用
inspection.suspicious.collections.method.calls.display.name=可疑集合方法调用
inspection.export.results.anonymous.ref.in.owner=位于
group.names.code.maturity.issues=代码成熟度问题
inspection.action.export.html=导出
inspection.dead.code.problem.synopsis9.suspicious=匿名类上下文是不可到达的.类是不实例化.{0,选择,1
unnecessary.module.dependency.display.name=不必要的模块依赖
inspection.visibility.accept.quickfix=接受建议的访问级别
suppress.inspection.field=抑制实地
inspection.field.can.be.local.problem.descriptor=字段可以被转换为一个局部变量
edit.dependency.rules.family=编辑依赖关系规则
configure.checker.option.assert.false.add.method.checker.dialog.title=添加断言错误的方法
inspection.dead.code.option.external=非 Java 文件中使用的类
problematic.whitespace.show.whitespaces.quickfix=在编辑器中切换显示空白
profile.assignment.repeatable.scope.warning=可重复的范围.正确的作业.
cleanup.in.scope=清除代码……
group.names.portability.issues=可移植性问题
default.file.template.edit.template=编辑模板...
inspection.1.8.problem.single.descriptor=默认的方法 ''{0}'' 不重写。它会导致JDK编译问题 {1}
profile.mapping.scope.column.title=范围
inspection.javadoc.option.tab.title.method=方法
inspection.dead.code.display.name=未使用的声明
inspection.javadoc.problem.duplicate.tag=重复的 @{0} 标记
inspection.dead.code.problem.synopsis9=实例化{0,选择,1
inspection.dead.code.problem.synopsis8=有可实现的实例化.{0,选择,1
inspection.dead.code.problem.synopsis7=可实例化了.{0,选择,1
inspection.nullable.problems.NotNull.parameter.overrides.not.annotated=参数标注 @{0} 不应该覆盖非注释参数
inspection.dead.code.problem.synopsis6=可及.{0,选择,1
inspection.filter.resolved.action.text=滤波器解决项目
inspection.test.only.problems.display.name=测试只有在生产代码的方法调用
inspection.dead.code.problem.synopsis4=场有{0,选择,1
introduce.constant.across.the.project=跨项目引入常量
inspection.dead.code.problem.synopsis3=场有一个用法,但它是不可到达的从入口点.
inspection.dead.code.problem.synopsis2=字段被指定,但无法访问.
inspection.dead.code.problem.synopsis1=现场没有使用.
inspection.javadoc.problem.cannot.resolve=无法解析符号{0}
dataflow.message.npe.method.invocation=方法调用<代码>
profile.save.as.ide.checkbox.title=另存为IDE项目
configure.checker.option.assert.false.method.panel.title=断言错误的方法
inspection.replace.ternary.quickfix=替换为"{0}!= null吗?"
inspection.export.results.file=文件
inspection.unused.parameter.composer=参数<代码>
suspicious.name.combination.display.name=可疑的变量/参数名称组合
inspection.1.8.problem.descriptor=默认 {0, choice, 0#|1#method is|2# methods are} 不重写。它会导致JDK编译问题 {1}
inspection.equals.hashcode.generate.hashcode.quickfix=生成 'hashCode()'
inspection.dead.code.problem.synopsis22=方法覆盖一个库方法但<ul><li>其{0}是从来没有实例化或</li><li>其{0}实例从入口点是不可到达的..</li></ul>
inspection.dead.code.problem.synopsis21=方法是从未使用过的一员这{0},但只是作为一个成员的实现类(es).该项目将保持compilable如果方法是删除从{0}.
inspection.redundant.throws.display.name=冗余throws子句
inspection.dead.code.problem.synopsis20=类有 {0, choice, 1#instantiation|2#{0,number} instantiations} 但他们是不可达的切入点。
inspection.export.save.button=保存
group.names.memory.issues=内存问题
inspection.parameter.can.be.local.problem.descriptor=参数可以被转化为一个局部变量
inspection.application.cannot.convert.project.0=无法转换项目：{0}
inspection.can.be.local.variable.problem.descriptor=变量<code>#ref</code>可以有<code>final</code>修饰符
inspection.can.be.final.option=报告类
inspection.visibility.compose.suggestion=可以{0}
inspection.unused.symbol.check.methods=检查方法(&M)
default.file.template.description=默认文件模板
inspection.same.return.value.problem.descriptor=方法总是返回{0}
inspection.new.profile.ide.to.project.warning.title=无法设置IDE剖面为范围
inspections.view.options.title=检查{0}选项
inspection.javadoc.problem.duplicate.param=重复 @param 标记参数"{0}"
edit.inspection.options=编辑 ''{0}'' 选项
duplicate.property.project.scope.option=项目范围(&P)
inspection.javadoc.problem.descriptor1=期在文档缺失.使用期间由工具生成的Javadoc注释的概述页面
boolean.method.is.always.inverted.problem.descriptor=布尔方法 <code>#ref</code> 总是反向的
inspection.dead.code.problem.synopsis19=无论是类或 {0, choice, 1#its implementation|2#{0,number} its implementations} 被实例化。
profile.banner.text=项目配置文件: {0} {1, choice, 0#(inactive)|1#}
inspection.filter.show.diff.only.action.text=只显示差异
inspection.dead.code.problem.synopsis18=方法从入口点是不可到达的.
inspection.unused.parameter.composer1=参数<代码>
inspection.dead.code.problem.synopsis17=方法使用(s),但他们都属于递归调用链,没有成员可从入口点.
configure.checker.option.assert.true.add.method.checker.dialog.title=添加断言 True 方法
inspection.dead.code.problem.synopsis16=方法从未使用
run.with.editor.settings.dialog.option=运行与编辑设置(&E)
duplicate.property.key.progress.indicator.text=处理重复的属性键:{0}
inspection.dependency.violator.problem.descriptor=依赖规则"{0}."是违反
inspection.dead.code.problem.synopsis13=类是不实例化.
inspection.dead.code.problem.synopsis12=类有一个实例化但它无法访问从入口点.
inspection.dead.code.problem.synopsis11=没有类引用已经被发现.类的静态初始化器是不可到达的.
inspection.dead.code.problem.synopsis10=匿名类声明上下文从入口点是不可到达的.类是从来没有实例化.
group.names.serialization.issues=序列化问题
inspection.export.results.can.be.final.description=声明可以有final修饰符
group.names.properties.files=属性文件
edit.options.of.reporter.inspection.text=编辑检查配置文件设置
inspection.1.7.problem.descriptor=泛型的使用后,会造成1.6 API编译问题与JDK{0}
group.names.error.handling=错误处理
long.line.display.name=代码风格行超过允许行
profile.unlock.action.text=解锁
dataflow.message.constant.condition=条件<代码>
inconsistent.bundle.property.inherited.with.the.same.value=财产继承了"{0}"文件相同的值
inspection.javadoc.problem.add.tag.family=添加缺少的 Javadoc 标签
run.inspection.on.file.intention.text=运行检查...
inspection.data.flow.display.name=恒定的条件和例外
special.annotations.annotations.list=额外的特别注释
suppress.inspection.problem=抑制
inspection.visibility.option1=建议包当地能见度水平为顶级类
inspection.export.inspections.link.text=检查
inspection.variable.assigned.to.itself.display.name=变量是分配给自己
inspection.nullable.problems.method.overrides.NotNull=未注解的方法重写为 @NotNull 注解的方法
inspection.unused.assignment.remove.assignment.quickfix=删除冗余分配
group.names.visibility.issues=可见性问题
inspection.export.results.overrides.implements=重写/实现
unsupported.character.for.the.charset=不支持的字符的字符集"{0}"
unnecessary.module.dependency.exported.problem.descriptor1=模块“{0}”不依赖于“{1}”。尽管“{0}”取决于“{2}”通过“{1}”的出口依赖
inspection.export.results.abstract.class=抽象类 (&N)
redundant.throws.declaration=冗余抛出声明
xml.suppressable.for.file.title=抑制文件
unused.library.problem.descriptor=未使用的库''{0}''
inspection.comparing.references.use.quickfix=使用equals()
inspection.compiler.javac.quirks.anno.array.comma.fix=移除尾随逗号
inspection.redundant.throws.problem.descriptor=声明的异常{0}在方法中从未抛出
group.names.encapsulation.issues=封装问题
inspection.export.results.uses=使用以下
dataflow.message.pointless.assignment.expression=条件 <code>#ref</code> #loc 在赋值表达式的左侧是永远 <code>{0}</code>. 可以简化
configure.checker.option.isNull.add.method.checker.dialog.title=添加IsNull检查方法
inspection.javadoc.problem.add.param.tag=为参数"{0}"添加标签 @param
inspection.javadoc.problem.missing.tag=需要标记{0}是缺失的
inspection.dead.code.problem.synopsis7.suspicious=没有可及的实例化.{0,选择,1
inspection.dead.code.problem.synopsis=字段从未分配。
inspection.tool.in.browser.description.title=描述
suspicious.name.combination.options.title=组名称
inconsistent.bundle.property.error=不一致的财产"{0}".必须定义在父文件"{1}".
inspection.dependency.configure.button.text=配置依赖规则
inspection.application.initializing.project=初始化项目...
inspection.surround.if.family=环绕用if语句
inspection.annotate.method.quickfix.name=注释方法为"@{0}"
inspection.javadoc.option.ignore.deprecated=忽略标记为 @deprecated 的元素
xml.suppressable.for.tag.title=抑制对标签
severities.editor.dialog.title=清规戒律编辑
duplicate.property.display.name=复制属性
inspection.javadoc.problem.wrong.tag=错误标签{0}
inspection.compiler.javac.quirks.qualifier.type.args.problem=仿制药在预选赛参考可能导致编译错误在某些Javac版本(例如.JDK 5和JDK 6).
inspection.nullable.problems.method.overrides.option=报告未注解的参数或方法重写 @NotNull (&A)
duplicate.property.file.scope.option=文件范围 (&F)
inspection.scope.for.title=范围
group.names.initialization.issues=初始化问题
inspection.export.results.extended=延长
dataflow.message.unboxing=拆箱的 <code>#ref</code> #loc 可能会产生 <code>java.lang.NullPointerException</code>
inspection.suspicious.collections.method.calls.problem.descriptor1=可疑的叫"{0}"
inspection.tree.popup.title=接受决议
inspection.action.export.popup.title=导出到
inspection.javadoc.problem.name.expected=名字预期
inspection.javadoc.display.name=声明已经Javadoc问题
suspicious.name.combination.add.titile=添加组名字
duplicate.property.value.progress.indicator.text=处理重复的属性值:{0}
report.suspicious.but.possibly.correct.method.calls=报告可疑的，但可能是正确的方法调用 (&R)
inspection.redundant.cast.display.name=多余的类型转换
duplicate.property.diff.key.option=重复的键值不同(&D)
dataflow.message.assigning.nullable=表达式<代码>
inspection.unused.parameter.delete.quickfix=删除未使用的参数
inspection.export.results.package=包
unnecessary.module.dependency.problem.descriptor=模块"{0}"来源不依赖模块"{1}"的来源,模块之间的依赖可能会被删除
inspection.can.be.final.accept.quickfix=接受建议的Final修饰符
inspection.reference.anonymous.name=匿名({0})
inspection.export.dialog.title=导出
inspection.application.starting.up=启动{0}...
suppress.inspection.statement=抑制for语句
dataflow.message.cce=铸造<代码>{0}< /代码>到<代码>
special.annotations.list.annotation.class=注解类
group.names.method.metrics=方法度量
offline.view.editor.settings.title=编辑器设置
inspection.nullable.problems.annotated.field.getter.conflict=吸气剂为 @{0} 字段注释 @{1}
inspection.javadoc.problem.duplicate.throws=重复 @throws 或 @exception 标记为异常"{0}"
inspection.general.tools.group.name=常规
inconsistent.bundle.report.inconsistent.properties.placeholders=报表属性不一致的占位符(&P)
problematic.whitespace.tabs.problem.descriptor=文件 ''{0}'' 使用制表符缩进
inspection.export.results.class=类
offline.view.parse.exception.title=没有发现显示
inspection.reference.anonymous=匿名
inspection.application.directory.cannot.be.found=目录{0}不能被发现
edit.options.of.reporter.inspection.family=编辑选项的记者检验
configure.checker.option.isNotNull.add.method.checker.dialog.title=添加IsNotNull检查方法
inspection.same.parameter.problem.descriptor=实际的参数值 ''{0}'' 永远是 ''{1}''
rename.inspection.profile=重命名检查配置文件
inspection.unused.symbol.check.parameters=检查参数(&P)
inspection.surround.if.quickfix=环绕用"if({0}!= null)"
inspection.annotate.quickfix.implements=实现
inspection.same.return.value.problem.descriptor2=此方法的所有实现始终都返回{0}
group.names.finalization.issues=终结问题
unused.import=未使用的导入(编辑器光)
inspection.same.return.value.problem.descriptor1=方法和它的所有变量总是返回{0}
special.annotations.list.remove.annotation.class=移除注解类
group.names.verbose.or.redundant.code.constructs=冗余的代码结构
inspection.unused.return.value.display.name=未使用的方法返回值
inconsistent.bundle.report.inconsistent.properties.ends=报表属性不一致的目的(&E)
profile.assignments.browse.scope.button.title=浏览... (&B)
inspection.application.project.has.older.format.and.will.be.converted=项目有一个年长的格式和将被转换.
inspection.empty.method.display.name=空方法
inspection.data.flow.redundant.instanceof.quickfix=替换为!= null
inspection.export.results.interface=接口
suspicious.name.combination.options.prompt=输入一个逗号分隔的列表的名称：
inspection.javadoc.required.tags.option.title=要求标签
inspection.export.results.dead.code=未使用的声明
inspection.convert.to.local.quickfix=转换为当地
inspection.action.profile.label=检查配置文件
profile.assignments.display.name=错误
inspection.options.action.text=检查"{0}"选项
inspection.local.can.be.final.option3=报告foreach参数
inspection.export.results.at.line=行
inspection.local.can.be.final.option2=报告抓参数
inspection.new.profile.dialog.title=创建新的配置文件
inspection.local.can.be.final.option1=报告方法参数
inspection.dead.code.problem.synopsis27.constructor=构造函数有用法(s),但他们都属于递归调用链,没有成员可从入口点.
inspection.javadoc.option.tab.title=类
dataflow.message.npe.field.access=废弃的<代码>
group.names.concurrency.annotation.issues=并发注释问题
group.names.bitwise.operation.issues=按位运算的问题
default.file.template.replace.with.actual.file.template=替换为实际文件模板
configure.checker.option.main.dialog.title=维护/检查方法配置
inspection.equals.hashcode.generate.equals.quickfix=生成 'equals()'
inspection.processing.job.descriptor2=分析代码
inspection.action.rerun=重新运行检查
inspection.processing.job.descriptor1=处理外部使用
inspection.disabled.error=检查"{0}"是禁用:{1}.
inspection.nullable.problems.primitive.type.annotation=原始类型成员不能为空/ NotNull注释
inspection.dead.code.problem.synopsis29.method=方法有 {0, choice, 1#使用|2#{0,number} 使用} 但他们是不可达的切入点。
inspection.filter.show.diff.action.text=显示差异
rename.message.prefix.inspection.profile=检查配置文件
inspection.redundant.type.display.name=冗余类型参数
lossy.encoding=有损编码
configure.checker.option.overlap.error.title=重叠检查
profile.quick.change.suggestion.dialog.title=无法切换配置文件
dataflow.message.constant.condition.when.reached=条件<代码>
default.ide.profile.label.text=默认的IDE配置文件:
inspection.processing.job.descriptor=处理项目用法在
inspection.action.group.by.severity=按严重程度分组
inspection.dead.code.problem.synopsis26.constructor=构造函数从未使用过.
inspection.results.title=结果通过编辑器设置
inspection.unused.assignment.problem.descriptor5=变量{0}从未使用
inspection.unused.assignment.problem.descriptor4=值改变在{0}是从未使用过
inspection.export.results.capitalized.class=类
group.names.class.structure=类结构
inspection.unused.assignment.problem.descriptor2=变量初始化{0}{1}是冗余的
inspection.unused.assignment.problem.descriptor1=变量{0}从未使用
offline.inspections.library.was.not.resolved=请配置库"{0}"用于模块"{1}"
unused.library.roots.problem.descriptor=未使用的根{0}从图书馆"{1}"
inspection.no.problems.dialog.title=代码检查
inspection.action.edit.settings=编辑设置
inspection.unused.return.value.problem.descriptor=方法的返回值是从未使用过
inspection.description.title=描述
inspection.generating.html.progress.title=生成HTML...
suppress.inspection.class=抑制上课
inspection.severity=严重程度:
inspection.unable.to.create.profile.dialog.title=无法创建配置文件.
inspection.redundant.array.creation.quickfix=移除数组创建显式
inspection.unable.to.create.profile.message=检查配置文件与名称"{0}"已经存在.
inspection.export.results.description.tag=描述
inspection.problems=问题
inspection.reference.noname=无名
inspection.empty.method.problem.descriptor4=此方法的所有实现都为空
inspection.empty.method.problem.descriptor3=该方法和所有它的derivables是空的
duplicate.property.module.scope.option=模块范围(&M)
inspection.empty.method.problem.descriptor2=该方法为空
suppress.all.for.class=抑制所有上课检查
inspection.empty.method.problem.descriptor1=空方法重写空方法
inspection.visibility.option=建议包当地能见度水平为类成员
inspection.javadoc.html.not.required.label.text=额外的不需要的HTML属性:
inspection.javadoc.option.ignore.period=忽略期问题
inspection.duplicated.code.display.name=重复的代码
inspection.compiler.javac.quirks.anno.array.comma.problem=在注释数组初始值设定项拖曳逗号可能导致编译错误在某些Javac版本(例如.JDK 5和JDK 6).
inconsistent.resource.bundle.display.name=不一致的资源包
errors.single.profile.title=错误:"{0}"检查配置文件
inspection.export.open.option=在浏览器中生成的HTML(&B)
profile.save.as.project.checkbox.title=保存为项目配置文件
duplicate.property.key.problem.descriptor=重复的属性键"{0}"
inspection.generating.xml.progress.title=转储XML...
inspection.action.group.by.severity.description=集团检查根据严重程度
inconsistent.bundle.report.missing.translations=报告失踪的翻译(&M)
dependency.injection.annotations.list=附加依赖项注入注释
inspection.nullable.problems.not.annotated.getters.for.annotated.fields=报告非注释setter参数或getter的注释字段
inspection.export.results.capitalized.abstract.class=抽象类 (&N)
group.names.declaration.redundancy=声明冗余
inspection.as=为{0}
unnecessary.module.dependency.exported.problem.descriptor=模块“{0}”不依赖于“{1}”。尽管“{2}”取决于“{1}”通过这个出口的依赖
disable.inspection.action.name=禁用检查
group.names.logging.issues=测井问题
group.names.numeric.issues=数值问题
inspection.nullable.problems.NotNull.parameter.overrides.Nullable=注解为 @NonNull 的参数不能重写 @Nullable 参数
group.names.class.metrics=类指标
detach.library.quickfix.name=分离库
inspection.error.level.popup.menu.title=选择错误级别
inspection.can.be.final.display.name=声明可以有final修饰符
inspection.duplicates.option.report.propertykey.expressions=忽略 @PropertyKey 表达式 (&I)
unchecked.warning=未经检查的警告
inspection.test.only.problems.test.only.method.call=测试只有在生产代码中调用方法
inspection.disabled.title=检查禁用
dataflow.message.passing.nullable.argument=论点<法典>
inspection.new.profile.text=新的配置文件名称
highlight.severity.create.dialog.name.label=名称
inspection.unused.return.value.make.void.quickfix=使方法无效
inspections.dead.code.entry.points.annotations.list.title=额外的入口点注释
group.names.modularization.issues=模块化问题
inspection.compiler.javac.quirks.qualifier.type.args.fix=移除泛型参数
profile.assignments.table.title=项目检查配置文件作业
inspection.redundant.throws.remove.quickfix=删除不必要的抛出声明
problematic.whitespace.display.name=有问题的空白
profile.assignments.browse.profile.scopes.dialog.title=概要范围
xml.suppressable.all.for.file.title=抑制所有文件
annotate.overridden.methods.as.notnull=注释覆盖方法为"@{0}"
inspection.export.title=代码检查结果
error.analysis.is.in.progress=错误分析是在进步
inspection.assert.quickfix=断言"{0}"
inconsistent.bundle.report.inconsistent.properties=报告不一致的属性(&I)
group.names.dependency.issues=依赖性问题
profile.default.profile.title=默认项目概要
inspection.profile.unnamed=未命名
inspection.dead.code.export.results.instantiated.from.heading=实例化
special.annotations.list.annotation.pattern=添加注释模式
inspection.capitalized.done=完成.
inspection.annotate.quickfix.overridden.method.messages=方法{0}{1}{2}方法.注释基本方法?
inspection.dead.code.remove.from.entry.point.quickfix=移除从入口点
inspection.export.results.initializer=初始化
group.names.naming.conventions=命名约定
inspection.duplicate.throws.problem=重复投
inspection.unused.symbol.check.fields=检查字段(&F)
highlight.severity.create.dialog.title=新的严重高亮
duplicate.property.diff.key.progress.indicator.text=处理重复的属性键:{0}
inspection.export.results.method=方法
inspection.tool.description.under.construction.text=在建设
inspection.redundant.suppression.description=冗余抑制
inspection.dead.code.problem.synopsis26.method=方法从未使用
group.names.threading.issues=线程问题
inspection.redundant.throws.problem.descriptor2=声明的异常{0}从未抛出
inspection.redundant.throws.problem.descriptor1=声明的异常{0}是从不扔在这个方法中,还是在其derivables
default.file.template.display.name=默认文件模板的使用
inspection.export.results.derived.methods=派生方法
inspection.dead.code.entry.points.display.name=入口点
group.names.internationalization.issues=国际化问题
inspection.javadoc.problem.add.tag=添加标签 @{0}{1}
duplicate.property.diff.key.problem.descriptor=重复的属性键"{0}"具有不同的值
inspection.dead.code.problem.synopsis28.constructor=构造函数有一个用法,但它是不可到达的从入口点.
inspection.scopes.and.severities=范围和Severeties:
group.names.compiler.issues=编译器问题
inspection.redundant.type.problem.descriptor=显式的类型参数可以推断
inspection.dead.code.entry.point.quickfix=添加作为入口点
inspection.export.results.callees=调用链
inspection.disabled.wrong.id=检查"{0}"是禁用:ID"{1}"不匹配"{2}"模式.
special.annotations.list.add.annotation.class=添加注解类
inspection.dead.code.problem.synopsis8.suspicious=没有可实现实例化.{0,选择,1
inspection.export.results.no.problems.found=没有发现错误或警告
configure.checker.option.assert.isNull.add.method.checker.dialog.title=添加断言 IsNull 方法
inspection.javadoc.option.tab.title.inner.class=内部类
inspection.export.results.error.title=检验结果出口
inspection.action.apply.quickfix=应用快速修复
configure.checker.option.overlap.error.msg=配置冲突
inspection.application.cannot.convert.the.project.the.following.files.are.read.only.0=不能转换项目.以下文件是只读:{0}
inspection.reference.invalid=无效
inspection.test.only.problems.test.only.class.reference=测试类是在生产代码引用
inspection.application.opening.project=打开的项目...
inspection.action.go.next=转到下一个问题
edit.dependency.rules.text=编辑依赖关系规则"{0}"
inspection.no.modules.error.message=这个项目不包含模块.不能进行检查.
inspection.nullable.problems.parameter.overrides.NotNull=未注解的参数重写为 @NotNull 参数
inspection.1.5.problem.descriptor=使用API文档作为 @since {0}
inspection.error.loading.message=错误阅读检验剖面{0,选择,0
boolean.method.is.always.inverted.display.name=布尔方法总是倒
inspection.duplicates.replace.family.quickfix=替换
group.names.packaging.issues=打包问题
inconsistent.bundle.report.duplicate.properties.values=报表属性覆盖与相同的值(&O)
inspection.javadoc.method.problem.missing.param.tag=需要标记{0}失踪参数{1}
inspection.empty.method.problem.descriptor=方法只调用它的超级
no.errors.found.in.this.file=在这个文件中没有发现的错误
profile.project.radiobutton.title=项目配置文件
configure.checker.option.button=配置维护/检查方法
inspection.unused.symbol.public.method.parameters=在非私有方法中检查参数(N) (&N)
inspection.comparing.references.problem.descriptor=可疑的比较#ref #loc
inspection.duplicates.replace.quickfix=替换为''{0}''
suppress.inspection.family=抑制检查
inspection.no.problems.message=没有可疑代码发现
suppress.inspection.method=抑制方法
inspection.application.project.was.succesfully.converted.old.project.files.were.saved.to.0=项目成功转换.老项目文件被保存到{0}
fix.all.inspection.problems.in.file=修复所有''{0}''问题
duplicate.property.value.problem.descriptor=重复的属性值"{0}"
inspection.redundant.array.creation.for.varargs.call.descriptor=创建冗余阵列叫可变参数的方法
inspection.action.noun=检验
inconsistent.bundle.untranslated.property.error=未翻译属性"{0}".应该被覆盖在"{1}".
inspection.export.results.constructor=构造函数
profile.project.settings.banner=项目配置文件设置
inconsistent.bundle.property.inconsistent.end.parent.end.from.check.symbols=不一致的属性值结束“{0}”,但发现“{1}”在“{2}”
inspection.duplicates.display.name=复制字符串文字
duplicate.property.value.option=重复的值(&V)
offline.view.title=离线查看
group.names.inheritance.issues=继承问题
inspection.export.results.implicit.constructor=隐式的构造函数
inspection.redundant.array.creation.display.name=创建冗余阵列
inspection.problem.synopsis=问题摘要
inspection.export.results.overrides.library.methods=重写库方法
detach.library.roots.quickfix.name=分离未使用的库根
inspection.parameter.can.be.local.display.name=参数可以是局部的
inspection.tools.action.show.global.inspections.description=隐藏全局检查设置
inspection.nullable.problems.annotated.field.constructor.parameter.not.annotated=构造函数参数 @{0} 的领域可能会注释 @{0} 本身
configure.checker.option.assert.true.method.panel.title=断言真正的方法
configure.annotations.option=配置注释
profile.lock.action.text=锁
offline.inspections.module.jdk.not.found=请指定sdk"{0}"模块"{1}"
group.names.abstraction.issues=抽象问题
inspection.command.line.explanation=预计参数: <project_file_path> <inspection_profile> <output_path> inspection.action.title=检查
wrong.package.statement=错误的包语句
inspection.duplicate.throws.more.general.problem=有一个更一般的异常,"{0}",已在转换列表.
inspection.export.results.extended.implemented=继承/实现
inspection.visibility.display.name=声明访问可能较弱
configure.checker.option.assert.isNotNull.method.panel.title=断言IsNotNull方法
inspection.same.parameter.fix.name=内联值"{1}"参数"{0}"
suspicious.name.combination.edit.title=编辑群名称
configure.checker.option.assert.isNull.method.panel.title=断言IsNull方法
inspection.empty.method.delete.quickfix=删除不必要的方法
profile.project.display.name=项目配置文件
inspection.done=完成.
problematic.whitespace.spaces.problem.descriptor=文件 ''{0}'' 使用空格缩进
inspection.data.flow.simplify.boolean.expression.quickfix=简化逻辑表达式
inspection.nullable.problems.Nullable.NotNull.conflict=不能同时与 @Nullable 和 @NotNull 注释
inspection.unused.assignment.remove.quickfix=移除冗余的初始化器
group.names.code.style.issues=代码风格问题
inspection.errors.occurred.dialog.title=错误发生
inspection.unused.assignment.option=报告我当可以换成(我1)
inspection.export.generating.html.for=生成HTML:{0}
inspection.dead.code.problem.synopsis6.suspicious=不可到达的.{0,选择,1
inspection.contract.display.name=合同的问题
dataflow.message.redundant.instanceof=条件<代码>
annotate.overridden.methods.parameters=重写方法参数注释"@{0}"
inspection.dead.code.comment.quickfix=注释掉
inspection.javadoc.label.text=额外的Javadoc标签：
inspection.export.results.used.from=使用从
inspection.equals.hashcode.only.one.defined.problem.descriptor=类有{0}定义但没有定义{1}
unhandled.exception.in.jsp.name=未处理的例外在JSP
dataflow.too.complex=方法<code>#ref</code>太复杂，无法被数据流算法分析
inspection.data.flow.simplify.to.assignment.quickfix.name=简化正常作业
inspection.redundant.cast.problem.descriptor=铸造{0},{1}是冗余的
nullable.stuff.problems.overridden.method.parameters.are.not.annotated=覆盖方法参数不会被注释
group.names.probable.bugs=可能的错误
inspection.annotate.quickfix.overridden.method.warning=重写的方法警告
inspection.export.options.panel.title=选项
group.names.cloning.issues=克隆问题
inspection.results.for.profile.toolwindow.title=结果检查配置文件"{0}"
cleanup.in.file=清除代码
inspection.application.file.cannot.be.found=文件{0}未找到
deprecated.symbol=过时的符号
inspection.reference.default.package=默认包
inspection.actiongo.prev=去Prev问题
nothing.found=没有发现
inspection.required.attributes.display.name=缺失必要的属性
inspection.export.results.abstract=抽象的
inspection.javadoc.problem.disallowed.tag=这里不允许标签''{0}''
inspection.new.profile.ide.to.project.warning.message=你想保存选定的IDE配置文件作为项目配置文件?
inspection.can.be.final.option2=报告字段
inspection.can.be.final.option1=报告方法
inspection.duplicates.option=最小字符串长度：(&M)
dataflow.message.passing.null.argument=通过 <code>null</code> 参数注释为 @NotNull
profile.project.activate.action.text=设置为IDE默认
inspection.1.5.display.name=使用API文档作为 @since 1.5(1.6 | 1.7)
inspection.unused.assignment.display.name=未使用的赋值
inspection.dead.code.problem.synopsis29.constructor=构造函数有 {0, choice, 1#使用|2#{0,number} 使用} 但他们是不可达的切入点。
inspection.redundant.suppression.name=冗余抑制
assignment.to.declared.variable.problem.descriptor=变量"{0}"是自我赋值初始化
inspection.javadoc.problem.descriptor=要求Javadoc不在
inspection.field.can.be.local.display.name=可以为本地字段
dataflow.message.unboxing.method.reference=使用 <code>#ref</code> #loc 需要拆箱它可以产生 <code>java.lang.NullPointerException</code>
inspection.can.be.local.parameter.problem.descriptor=参数<code>#ref</code>可以有<code>最终</code>修饰符
inconsistent.line.separators=不一致的行分隔符
inspection.javadoc.dialog.title=编辑附加的JavaDoc标签
inspection.dead.code.export.results.no.instantiations.found=没有实例化发现.
inspection.export.results.static=静态
inspection.duplicate.throws.display.name=重复投
unused.library.backward.analysis.job.description=执行反分析
inspection.export.open.source.link.text=开源
inspection.export.results.field=字段
duplicate.property.key.option=重复键(&K)
inspection.export.error.writing.to=错误写入{0}
inspection.local.can.be.final.display.name=局部变量或参数可以最终
inspection.javadoc.option.tab.title.package=包
default.file.template.report.file.header=报告默认文件头
inspection.duplicate.throws.ignore.subclassing.option=忽略例外子类化别人
inspection.local.can.be.final.option=报告局部变量
inspection.tools.action.show.global.inspections.text=隐藏全局检查
inspection.diff.format.error=必需的参数: <old_file> <new_file> [<delta_file_name>]
inspection.deprecated.display.name=过时的API使用
nullable.stuff.problems.overridden.methods.are.not.annotated=重写的方法不是注释
dataflow.message.npe.array.access=数组访问<代码>
inspection.quickfix.assert.family=断言
illegal.package.dependencies=非法的包依赖关系
inspection.redundant.type.remove.quickfix=移除显式的类型参数
inspection.export.results.suppress=抑制
group.names.data.flow.issues=数据流问题
inspection.export.results.problem.element.tag=问题类
inspection.reference.implicit.constructor.name=隐式的构造函数{0}
unused.library.display.name=未使用的库
inspection.nullable.problems.annotated.field.getter.not.annotated=吸气剂为 @{0} 的领域可能会注释 @{0} 本身
group.names.performance.issues=性能问题
inspection.unused.assignment.option2=报告冗余的初始化
inspection.unused.assignment.option1=报告我当改变值是不习惯后来
